diff --git a/node_modules/libsignal/src/session_builder.js b/node_modules/libsignal/src/session_builder.js
index 7b7d852..5a015a7 100644
--- a/node_modules/libsignal/src/session_builder.js
+++ b/node_modules/libsignal/src/session_builder.js
@@ -43,7 +43,6 @@ class SessionBuilder {
             } else {
                 const openSession = record.getOpenSession();
                 if (openSession) {
-                    console.warn("Closing stale open session for new outgoing prekey bundle");
                     record.closeSession(openSession);
                 }
             }
@@ -71,7 +70,6 @@ class SessionBuilder {
         }
         const existingOpenSession = record.getOpenSession();
         if (existingOpenSession) {
-            console.warn("Closing open session in favor of incoming prekey bundle");
             record.closeSession(existingOpenSession);
         }
         record.setSession(await this.initSession(false, preKeyPair, signedPreKeyPair,
diff --git a/node_modules/libsignal/src/session_cipher.js b/node_modules/libsignal/src/session_cipher.js
index 0e6df11..ad6b3fe 100644
--- a/node_modules/libsignal/src/session_cipher.js
+++ b/node_modules/libsignal/src/session_cipher.js
@@ -154,10 +154,6 @@ class SessionCipher {
                 errs.push(e);
             }
         }
-        console.error("Failed to decrypt message with any known session...");
-        for (const e of errs) {
-            console.error("Session error:" + e, e.stack);
-        }
         throw new errors.SessionError("No matching sessions found for message");
     }
 
diff --git a/node_modules/libsignal/src/session_record.js b/node_modules/libsignal/src/session_record.js
index 7626a39..43537a8 100644
--- a/node_modules/libsignal/src/session_record.js
+++ b/node_modules/libsignal/src/session_record.js
@@ -190,7 +190,6 @@ class SessionRecord {
         let run = (data.version === undefined);
         for (let i = 0; i < migrations.length; ++i) {
             if (run) {
-                console.info("Migrating session to:", migrations[i].version);
                 migrations[i].migrate(data);
             } else if (migrations[i].version === data.version) {
                 run = true;
@@ -267,18 +266,15 @@ class SessionRecord {
 
     closeSession(session) {
         if (this.isClosed(session)) {
-            console.warn("Session already closed", session);
             return;
         }
-        console.info("Closing session:", session);
         session.indexInfo.closed = Date.now();
     }
 
     openSession(session) {
         if (!this.isClosed(session)) {
-            console.warn("Session already open");
+			/** noop */
         }
-        console.info("Opening session:", session);
         session.indexInfo.closed = -1;
     }
 
@@ -298,7 +294,6 @@ class SessionRecord {
                 }
             }
             if (oldestKey) {
-                console.info("Removing old closed session:", oldestSession);
                 delete this.sessions[oldestKey];
             } else {
                 throw new Error('Corrupt sessions object');
